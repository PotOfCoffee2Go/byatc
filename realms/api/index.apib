FORMAT: 1A

# Byatec API
Byatec API is an auction service designed for Live Events. Guest and Item data for the event is stored on Google Sheets.

## Media Types
Where applicable this API uses the JSON media-type to represent resources states and affordances.

Requests with a message-body are using plain JSON to set or update resource states.

HTML may be returned by the service running Byatec (
[Cloud9](https://c9.io/?redirect=0), 
[rackspace](https://www.rackspace.com/en-us),
[OpenShift](https://www.openshift.com/),
[AWS](https://aws.amazon.com/?nc2=h_lg), etc).
Usually means there has been a malformed REST request or is Byatec not running on the service.

## Protocols
Both HTTPS [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) and WSS 
[socket.io](https://socket.io/) protocols are supported. The URI and
body contents are identical. To facilitate seamless JavaScript code transistion between HTTPS and WSS
protocols, the HTTPS responses use either code 200 on success or 418 on error. 

## Error States
The Byatec API returns either a HTTP Response Status Code of 200 - OK or 418 - I'm a teapot.
To determine the error on a HTTP 418 response, check the 'error' field in the response body
described below.

You might also get other codes, such as 301, 302, etc; but those are not from the auction system but
normally from network proxies and such implemented between the client and server.

## Responses

The server responds with the same layout for all resource requests - regardless if responding via HTTP or WSS.
The layout is designed to be both HTTP and Websockets friendly.

All JSON responses have the same layout as this Guest Id G0001 request:


```json
{
  "resource": "/cyborg/chef/guests/G0001",
  "data": {...},
  "location": "https://byatc-potofcoffee2go.c9users.io:80/...",
  "status": {
    "code": 200,
    "text": "200 - OK",
    "boss": "cyborg",
    "minion": "chef",
    "guest": "G0278"
  },
  "error": null
}

```
The `resource` is the resource requested, `data` contains the result of the request,
`location` is the fully qualified resource name on the internet, `status` contains meta data
pertaining to the result of the request, and `error` is null or indicates any errors
that resulted from the request.

If the HTTP Status Code is 200 - OK - then the `error` will be null. When the Status
Code is 418 - I'm a teapot, the `error` property will contain information about the
error which occured.


## Viewer
The [API Viewer](/api/viewer) allows you to submit REST calls and view the results.

# Group Resources

## Health [/health]
Indicates the health of the server by returning a HTTP status code 200

## Retrieve API Health [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Body

            {
              "health": "ok"
            }

## Version [/version]
API version information is obtained using `Retrieve API Version` request. The major version
number indicates to expect significant changes in API that may not be compatible with
prior major releases.

## Retrieve API Version [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Body

            {
              "version": "1.0.0"
            }

## Authentication [/cyborg/constable/guests/login]
In a production environment REST requests must be authorized using the 
[HTTP Authorization Header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization) 
with the value 'BYATEC token' where `token` is the token returned by the `Guest Authentication Token`
request.

## Retrieve Guest Authentication Token [POST]
Authentication is performed by giving a username and password to the login request returning an authorization token.

+ Request (application/json)

    + Body

            {
                "username": "name",
                "password": "word"
            }

+ Response 200 (application/json)

    + Headers

            Authorization: token
    + Body

            {
              "resource": "/cyborg/constable/guests/login",
              "data": {
                "id": "G0003",
                "Seating": 1,
                "Paying": "G0003",
                "UserName": "Matt",
                "Password": "Max",
                "Email": "mbriefkim@sillier.com",
                "FirstName": "Matt",
                "LastName": "Brief"
              },
              "status": {
                "code": 200,
                "text": "200 - OK",
                "guest": "G0003",
                "boss": "cyborg",
                "minion": "constable",
                "method": "POST",
                "location": "https://byatc-potofcoffee2go.c9users.io:80/cyborg/constable/guests/login",
                "timestamp": "2017-05-06T10:11:28.328Z",
                "token": "4974a954-d165-48fb-abe3-a157fd5f4e30"
              },
              "error": null
            }


+ Response 418 (application/json)

    + Headers

    + Body

            {
              "resource": "/cyborg/constable/guests/login",
              "data": {},
              "status": {
                "code": 418,
                "text": "418 - I'm a teapot",
                "location": null,
                "timestamp": "2017-05-06T10:58:32.628Z"
              },
              "error": {
                "name": "MinionError",
                "minion": "constable",
                "message": "Can not validate guest login",
                "inner": null,
                "id": 101
              }
            }
            

## Server Controls [/queen/commands/:boss/:cmd]
The Byatec auction servers are controlled by API calls specifically designed to work
in conjuction with the `/monarchy/queen.js` program. This program provides start,
suspend, and shutdown commands as well as the keys, tokens, and secret values to
internet resources such as Google and Trello.

::: warning

This is an **internal command** - to be used by `/monarchy/queen.js` only.

RESTful requests described below will not be available until Her Majesty (queen.js) starts the servers

:::

## Server Commands [POST]

+ Request (application/json)

    + Body

            {
                "todo": "The requests and responses are described elsewhere"
            }

+ Response 200 (application/json)

    + Body

            {
                "todo": "The requests and responses are described elsewhere"
            }



## Other Server resources [/]

Any resource request not serviced by the API will be considered a web page request 
(html, css, js, etc) with the HTTP Status Codes and content appropriate for web browsers.

# Group Most Common
There are many API calls to create, read, update, and delete auction guests, items, and categories.
However, most are for adding plugins and features and not required by guest front-end systems.


## Get a Guest's Data [/cyborg/chef/guests/{id}]
Retrieve Guest Data given the id of the guest. If the id is not given will return all guests.

## Get Guests Data [GET]

+ Parameters
    + id (optional, string) ... Id of the guest to retrieve

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)

    + Body

            {
              "resource": "/cyborg/chef/guests/G0265",
              "data": {
                "G0265": {
                  "profile": {
                    "range": "Guests!A267:K267",
                    "id": "G0265",
                    "Paying": "G0265",
                    "Table": 28,
                    "UserName": "terry",
                    "Password": "gus",
                    "Email": "",
                    "FirstName": "Terry",
                    "LastName": "Keyser",
                    "Address": "",
                    "Phone": "",
                    "RSVP": false
                  },
                  "trello": {
                    "id": "58ebfa7328ef4ba6c39add21",
                    "name": "G0265 - Terry Keyser",
                    "labels": {
                      "green": {
                        "id": "58e9e115ced82109ff1c63a9",
                        "idBoard": "58e9e11574278c71a4293e0f",
                        "name": "Player",
                        "color": "green"
                      }
                    },
                    "attachments": {
                      
                    }
                  },
                  "checkout": {
                    "range": "Checkout!A267:J267",
                    "id": "G0265",
                    "Player": true,
                    "Bids": 0,
                    "Wins": 0,
                    "Buys": 0,
                    "Won": 0,
                    "Bought": 0,
                    "Shipping": 0,
                    "Tax": 0,
                    "Paid": 0
                  }
                }
              },
              "status": {
                "code": 200,
                "text": "200 - OK",
                "guest": null,
                "boss": "cyborg",
                "minion": "chef",
                "method": "GET",
                "location": "https://byatc-potofcoffee2go.c9users.io/cyborg/chef/guests/G0265",
                "timestamp": "2017-05-21T14:24:15.952Z"
              },
              "error": null
            }


## Get an Item's Data [/cyborg/chef/items/{id}]
Retrieve Item Data given the id of the item.  If the id is not given will return all items.

## Get Item Data [GET]

+ Parameters
    + id (optional, string) ... Id of the item to retrieve

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)

    + Body

            {
              "resource": "/cyborg/chef/items/I0233",
              "data": {
                "I0233": {
                  "profile": {
                    "range": "Items!A235:E235",
                    "id": "I0233",
                    "Category": "C005",
                    "Code": 1715,
                    "Item": "Horse Basket",
                    "Sponsorship": false
                  },
                  "trello": {
                    "id": "58ec065717e7923a14ed5b84",
                    "name": "I0233 - Horse Basket",
                    "labels": {
                      
                    },
                    "attachments": {
                      
                    }
                  },
                  "category": {
                    "range": "Categories!A7:F7",
                    "id": "C005",
                    "Parent": "C005",
                    "Code": "A",
                    "Name": "Animal",
                    "Description": "Animal Desc",
                    "Active": true
                  },
                  "auction": {
                    "range": "Items!F235:T235",
                    "id": "I0233",
                    "Active": true,
                    "OpenBid": 45,
                    "Increment": 5,
                    "BidQty": 1,
                    "BuyPrice": 135,
                    "BuyQty": 1,
                    "NextBid": 45,
                    "BidQtySold": 0,
                    "BuyQtySold": 0,
                    "BidDue": 0,
                    "BuyDue": 0,
                    "LastBidder": "",
                    "Time": "",
                    "Bids": 0
                  }
                }
              },
              "status": {
                "code": 200,
                "text": "200 - OK",
                "guest": null,
                "boss": "cyborg",
                "minion": "chef",
                "method": "GET",
                "location": "https://byatc-potofcoffee2go.c9users.io/cyborg/chef/items/I0233",
                "timestamp": "2017-05-21T14:32:26.903Z"
              },
              "error": null
            }



## Items by category [/cyborg/chef/items/by/category]
Gets a list of all items by category. This API call is very handy for front-end carousels allowing
guests to select items that are within a category.

## Items by category [GET]
Items by category


+ Request (application/json)

    + Headers

            Authorization: token



+ Response 200 (application/json)

    + Headers

            Authorization: token

    + Body

            {
                "todo": "The requests and responses are described elsewhere"
            }


## Place a bid [/ninja/clerk/bid/{id}]
Place a bid by a guest on an item

## Post Bid [POST]

+ Request (application/json)

    + guest (string) ... Id of the guest placing the bid
    + item (string) ... Id of the item bid being placed
    + amount (string) ... Dollar amount of the bid

    + Headers

            Authorization: token

    + Body

            {
                "guest" : "idGuest",
                "item" : "idItem",
                "amount" : 123.00
            }

+ Response 200 (application/json)

    + Body

            {
              "resource": "/ninja/clerk/bid/",
              "data": {
                "bid": {
                  "guest": "G0003",
                  "item": "I0003",
                  "price": 35
                },
                "checkout": {
                  "range": "Checkout!A5:J5",
                  "id": "G0003",
                  "Player": true,
                  "Bids": 5,
                  "Wins": 1,
                  "Buys": 2,
                  "Won": 150,
                  "Bought": 100,
                  "Shipping": 0,
                  "Tax": 0,
                  "Paid": 230
                },
                "auction": {
                  "range": "Items!F5:T5",
                  "id": "I0003",
                  "Active": true,
                  "OpenBid": 35,
                  "Increment": 5,
                  "BidQty": 1,
                  "BuyPrice": 105,
                  "BuyQty": 1,
                  "NextBid": null,
                  "BidQtySold": 0,
                  "BuyQtySold": 0,
                  "BuyDue": 0,
                  "LastBidder": "G0003",
                  "Time": "2017-05-21T16:27:27.809Z",
                  "Bids": 4
                }
              },
              "status": {
                "code": 200,
                "text": "200 - OK",
                "guest": null,
                "boss": "ninja",
                "minion": "clerk",
                "method": "POST",
                "location": "https://byatc-potofcoffee2go.c9users.io:80/ninja/clerk/bid/",
                "timestamp": "2017-05-21T16:27:27.809Z"
              },
              "error": null
            }

## Items purchased [/cyborg/chef/purchases/{id}]
List of guest purchases

## Purchases [GET]

+ id (string) ... Id of the purchase

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)

    + Body

            {
              "resource": "/cyborg/chef/purchases/P0001",
              "data": {
                "P0001": {
                  "profile": {
                    "range": "Purchases!A3:I3",
                    "id": "P0001",
                    "GuestId": "G0001",
                    "ItemId": "I0001",
                    "TransactionId": "T2345-567",
                    "Provider": "PayPal",
                    "BuyOrWon": "Buy",
                    "Time": "2017-05-07T00:36:22.798Z",
                    "Total": 250,
                    "Paid": 250
                  }
                }
              },
              "status": {
                "code": 200,
                "text": "200 - OK",
                "guest": null,
                "boss": "cyborg",
                "minion": "chef",
                "method": "GET",
                "location": "https://byatc-potofcoffee2go.c9users.io/cyborg/chef/purchases/P0001",
                "timestamp": "2017-05-27T19:55:39.032Z"
              },
              "error": null
            }
